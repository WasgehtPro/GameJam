[gd_scene load_steps=8 format=3 uid="uid://bmt1aict1k0h8"]

[ext_resource type="Texture2D" uid="uid://cs7ot8norqy2f" path="res://Player/Player.png" id="1_l0e7v"]
[ext_resource type="Texture2D" uid="uid://b3f3hcjxl02rb" path="res://LightMasks/Circle.png" id="2_pdi15"]
[ext_resource type="Texture2D" uid="uid://71oqgayj5fa5" path="res://LightMasks/StandartCone.png" id="3_kn1fo"]

[sub_resource type="GDScript" id="GDScript_5151p"]
script/source = "extends CharacterBody2D

var grabForce = 50
var pushForce = 1000
var speed = 75.0
var slowDown = speed * 0.2
var grabbedObj
var hit = false
var health = 100
var hand
var batteries = 0
var maxAmmo = 10
var ammo = 0

@onready var pickUpRange = $PickUpRange
@onready var hit_timer = $HitTimer
@onready var sprite = $Sprite2D
@onready var hands = $Sprite2D/Hands
@onready var grabRange: RayCast2D = $Sprite2D/GrabRange
@onready var progress_bar = $Control/ProgressBar
@onready var batteryContainer = $Batteries
const BATTERY_IMG = preload(\"res://UI/BatteryImg.tscn\")
const BULLET = preload(\"res://Items/Bullet/Bullet.tscn\")

func _physics_process(delta):
	sprite.look_at(get_global_mouse_position())
	
	if Input.is_action_just_pressed(\"Equip\"):
		if hand:
			drop()
		else:
			equip()
	
	if Input.is_action_just_pressed(\"RMB\") and hand:
		hand.use(self)
		
	if Input.is_action_pressed(\"Grab\"):
		onGrab()
	elif Input.is_action_just_released(\"Grab\"):
		onGrabStop()
	
	# Get the input direction and handle the movement/deceleration.
	var direction = Vector2(Input.get_axis(\"Left\", \"Right\"), Input.get_axis(\"Up\", \"Down\"))
	
	if direction:
		if direction.length() > 1:
			direction = direction.normalized()
		velocity = direction * speed * delta * 50
	else:
		velocity = Vector2(move_toward(velocity.x, 0, slowDown), move_toward(velocity.y, 0, slowDown))

	if move_and_slide():
		handleCollision()

func onGrab():
	if not grabbedObj:
		grabbedObj = grabRange.get_collider()
		if grabbedObj:
			if grabbedObj.is_in_group(\"Item\"):
				grabbedObj.get_child(0).onThrowStart()
	if grabbedObj is RigidBody2D and grabbedObj.is_in_group(\"Movable\"):
		if (global_position - grabbedObj.global_position).length() > 60:
			onGrabStop()
			grabbedObj = null
		else:
			grabbedObj.apply_force((hands.global_position - grabbedObj.global_position) * grabForce / grabbedObj.mass)

func onGrabStop():
	if grabbedObj is RigidBody2D:
		if grabbedObj.is_in_group(\"Item\"):
			grabbedObj.get_child(0).onThrowStop()
		grabbedObj.collision_layer = 1
		grabbedObj = null
	
func handleCollision():
	var col = get_last_slide_collision()
	var obj = col.get_collider()
	if \"Enemy\" in obj.name:
		if not hit:
			hit = true
			health -= 10
			progress_bar.value = health
			hit_timer.start()
			if progress_bar.value < 1:
				get_tree().change_scene_to_file(\"res://Levels/MainMenu.tscn\")
	elif obj is RigidBody2D:
			obj.apply_force(col.get_normal() * -pushForce / obj.mass)



func drop():
	if is_instance_valid(hand):
		hand.get_child(0).drop(hands.global_transform, Vector2(1, 0).rotated(sprite.global_rotation))
	hand = null

func equip():
	var obj = grabRange.get_collider() as RigidBody2D
	if obj:
		if obj.is_in_group(\"Item\"):
			hand = obj.get_child(0).pickUp()
			hands.add_child(hand)
			hand.get_child(0).onEquip()


func _on_hit_timer_timeout():
	hit = false

func refreshBattery():
	for i in batteryContainer.get_children():
		i.queue_free()
	for i in batteries:
		var display = BATTERY_IMG.instantiate()
		display.position = Vector2(-i * 5, 0)
		batteryContainer.add_child(display)

func checkAmmo():
	if ammo > maxAmmo:
		var vomit = ammo - maxAmmo
		ammo = maxAmmo
		for i in vomit:
			var bullet = BULLET.instantiate()
			bullet.position = hands.global_position
			bullet.angular_velocity = randi_range(-10, 10)
			bullet.apply_force(Vector2(randi_range(-10, 10), randi_range(-10, 10)) * 2000)
			bullet.collision_layer = 2
			get_tree().get_root().add_child(bullet)
"

[sub_resource type="CircleShape2D" id="CircleShape2D_axj04"]
radius = 17.0

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_wp2fi"]
bg_color = Color(1, 0, 0, 1)

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_ys33i"]
bg_color = Color(0, 1, 0, 1)

[node name="Player" type="CharacterBody2D" groups=["Player"]]
texture_filter = 1
motion_mode = 1
script = SubResource("GDScript_5151p")

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource("CircleShape2D_axj04")

[node name="Sprite2D" type="Sprite2D" parent="."]
light_mask = 4
texture_filter = 1
texture = ExtResource("1_l0e7v")

[node name="PointLight2D" type="PointLight2D" parent="Sprite2D"]
shadow_enabled = true
texture = ExtResource("2_pdi15")

[node name="PointLight2D2" type="PointLight2D" parent="Sprite2D"]
light_mask = 2
visibility_layer = 2
blend_mode = 2
range_item_cull_mask = 2
shadow_enabled = true
shadow_item_cull_mask = 2
texture = ExtResource("2_pdi15")

[node name="PointLight2D3" type="PointLight2D" parent="Sprite2D"]
rotation = -1.5708
energy = 0.2
shadow_enabled = true
texture = ExtResource("3_kn1fo")
texture_scale = 0.5

[node name="PointLight2D4" type="PointLight2D" parent="Sprite2D"]
light_mask = 2
visibility_layer = 2
rotation = -1.5708
blend_mode = 2
range_item_cull_mask = 2
shadow_enabled = true
shadow_item_cull_mask = 2
texture = ExtResource("3_kn1fo")
texture_scale = 0.5

[node name="GrabRange" type="RayCast2D" parent="Sprite2D"]
target_position = Vector2(30, 0)

[node name="Hands" type="Node2D" parent="Sprite2D"]
position = Vector2(30, 0)

[node name="Camera2D" type="Camera2D" parent="."]
zoom = Vector2(3, 3)
position_smoothing_enabled = true

[node name="Control" type="Control" parent="."]
layout_mode = 3
anchors_preset = 0
offset_left = -17.0
offset_top = -25.0
offset_right = 18.0
offset_bottom = -20.0

[node name="ProgressBar" type="ProgressBar" parent="Control"]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
theme_override_styles/background = SubResource("StyleBoxFlat_wp2fi")
theme_override_styles/fill = SubResource("StyleBoxFlat_ys33i")
value = 100.0
show_percentage = false

[node name="HitTimer" type="Timer" parent="."]
wait_time = 0.2

[node name="Batteries" type="Control" parent="."]
layout_mode = 3
anchors_preset = 0
offset_top = 16.0
offset_bottom = 16.0

[connection signal="timeout" from="HitTimer" to="." method="_on_hit_timer_timeout"]
